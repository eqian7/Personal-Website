{"version":3,"sources":["components/Navbar/Navbar.tsx","components/Home/HomeContainer.tsx","components/About/AboutHeader.tsx","components/About/AboutContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","id","className","href","HomeContainer","AboutHeader","src","alt","AboutContainer","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAgBeA,G,kBAbA,WACb,OACE,yBAAKC,GAAG,mBACN,wBAAIA,GAAG,UACL,wBAAIC,UAAU,cAAa,uBAAGC,KAAK,KAAR,SAC3B,wBAAID,UAAU,cAAa,uBAAGC,KAAK,OAAR,aAC3B,wBAAID,UAAU,cAAa,uBAAGC,KAAK,WAAR,WAC3B,wBAAID,UAAU,cAAa,uBAAGC,KAAK,SAAR,aCMpBC,EAZO,WACpB,OACE,yBAAKH,GAAK,iBACR,kBAAC,EAAD,MACA,yBAAKA,GAAK,YAAV,gBAGA,gCCESI,G,YAVK,WAClB,OACE,yBAAKJ,GAAG,eACN,2CACA,yBAAKK,IAAI,eAAeC,IAAI,cAAcN,GAAG,oBC4BpCO,EA9BQ,WACrB,OACE,yBAAKP,GAAK,kBACR,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,GAAK,aACR,2VAMA,6BACA,2TAUF,gCCRSQ,MAbf,WACE,OACG,kBAAC,IAAD,KACC,oCACE,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,EAAeQ,OAAK,IAC/C,kBAAC,IAAD,CAAOF,KAAK,MAAMC,UAAWH,QCDpBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.489e8a5f.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  return (\n    <div id='NavbarContainer'>\n      <ul id=\"Navbar\">\n        <li className='NavbarItem'><a href=\"/\">Home</a></li>\n        <li className='NavbarItem'><a href=\"/me\">About Me</a></li>\n        <li className='NavbarItem'><a href=\"/travel\">Travel</a></li>\n        <li className='NavbarItem'><a href=\"/blog\">Blog</a></li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Navbar\n","import React from 'react';\nimport './HomeContainer.css';\nimport Navbar from '../Navbar/Navbar';\n\nconst HomeContainer = () => {\n  return (\n    <div id = 'HomeContainer'>\n      <Navbar/>\n      <div id = 'HomeText'>\n        Hi, I'm Eric\n      </div>\n      <div></div>\n    </div>\n  )\n}\n\nexport default HomeContainer\n","import React from 'react';\nimport './AboutHeader.css';\n\nconst AboutHeader = () => {\n  return (\n    <div id='AboutHeader'>\n      <h1> Eric Qian </h1>\n      <img src='/profile.jpg' alt='profile pic' id='AboutPicture'/>\n\n    </div>\n  )\n}\n\nexport default AboutHeader;\n","import React from 'react';\nimport './AboutContainer.css';\nimport Navbar from '../Navbar/Navbar';\nimport AboutHeader from './AboutHeader';\n\nconst AboutContainer = () => {\n  return (\n    <div id = 'AboutContainer'>\n      <Navbar/>\n      <AboutHeader/>\n      <div id = 'AboutText'>\n        <p>\n          The world is full of amazing things to do. Yet, oftentimes we don't know what\n          those things are, or even if we do, we may not have sufficient time to do them. My goal is\n          to optimize people's time, preference discovery, and experiences using machine learning\n          and statistical inference so they can live their best life.\n        </p>\n        <br/>\n        <p>\n          I'm Eric, and I'm a senior at MIT studying computer science with extensive experience\n          in computer vision, algorithms, and web development. My current project is on advancing\n          learning-based rendering systems for eventual use in virtual reality to democratize\n          experiences for everyone.\n        </p>\n\n\n\n      </div>\n      <div></div>\n    </div>\n  )\n}\n\n\n\nexport default AboutContainer;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport HomeContainer from './components/Home/HomeContainer';\nimport AboutContainer from './components/About/AboutContainer';\n\nfunction App() {\n  return (\n     <BrowserRouter>\n      <>\n        <Switch>\n           <Route path=\"/\" component={HomeContainer} exact/>\n           <Route path=\"/me\" component={AboutContainer}/>\n         </Switch>\n      </>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}